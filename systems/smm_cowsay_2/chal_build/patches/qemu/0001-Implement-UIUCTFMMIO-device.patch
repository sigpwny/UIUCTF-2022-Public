From ce16ffbc0ede3f99f015879c5fb64702068f318c Mon Sep 17 00:00:00 2001
From: YiFei Zhu <zhuyifei@google.com>
Date: Mon, 28 Mar 2022 17:42:35 -0700
Subject: [PATCH 1/3] Implement UIUCTFMMIO device

It reads a file "region4" at cwd and use that as the data visible
a MMIO address 0x44440000, with 1 page size, if read by SMM. If read
outside SMM, the message will be "uiuctf{nice try!!!!!!!!!!!!}\n".

Signed-off-by: YiFei Zhu <zhuyifei@google.com>
---
 hw/i386/pc.c         |   3 +
 hw/misc/meson.build  |   2 +
 hw/misc/uiuctfmmio.c | 156 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 161 insertions(+)
 create mode 100644 hw/misc/uiuctfmmio.c

diff --git a/hw/i386/pc.c b/hw/i386/pc.c
index fd55fc725c..deed57ea39 100644
--- a/hw/i386/pc.c
+++ b/hw/i386/pc.c
@@ -933,6 +933,9 @@ void pc_memory_init(PCMachineState *pcms,
         fw_cfg_add_file(fw_cfg, "etc/reserved-memory-end", val, sizeof(*val));
     }
 
+    DeviceState *dev = qdev_new("uiuctfmmio");
+    qdev_realize_and_unref(dev, sysbus_get_default(), &error_fatal);
+
     if (linux_boot) {
         x86_load_linux(x86ms, fw_cfg, pcmc->acpi_data_size,
                        pcmc->pvh_enabled);
diff --git a/hw/misc/meson.build b/hw/misc/meson.build
index 6fb69612e0..161e1b834e 100644
--- a/hw/misc/meson.build
+++ b/hw/misc/meson.build
@@ -133,3 +133,5 @@ specific_ss.add(when: 'CONFIG_MIPS_CPS', if_true: files('mips_cmgcr.c', 'mips_cp
 specific_ss.add(when: 'CONFIG_MIPS_ITU', if_true: files('mips_itu.c'))
 
 specific_ss.add(when: 'CONFIG_SBSA_REF', if_true: files('sbsa_ec.c'))
+
+softmmu_ss.add(files('uiuctfmmio.c'))
diff --git a/hw/misc/uiuctfmmio.c b/hw/misc/uiuctfmmio.c
new file mode 100644
index 0000000000..a93b47ae79
--- /dev/null
+++ b/hw/misc/uiuctfmmio.c
@@ -0,0 +1,156 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright 2021-2022 Google LLC.
+ */
+
+#include "qemu/osdep.h"
+#include "qapi/error.h"
+#include "hw/sysbus.h"
+#include "hw/i386/pc.h"
+#include <unistd.h>
+
+#define TYPE_UIUCTFMMIO "uiuctfmmio"
+#define UIUCTFMMIO(obj) OBJECT_CHECK(UiuctfmmioState, (obj), TYPE_UIUCTFMMIO)
+
+typedef struct {
+    SysBusDevice parent_obj;
+    MemoryRegion region4;
+    MemoryRegion region5;
+} UiuctfmmioState;
+
+static char nice_try_msg[] = "uiuctf{nice try!!!!!!!!!!!!}\n";
+static size_t nice_try_len = sizeof(nice_try_msg) - 1;
+
+static char *region4_msg = nice_try_msg;
+static size_t region4_len;
+
+static void uiuctfmmio_load_data(const char *filename, char **msg, size_t *len)
+{
+    void *buffer;
+    FILE *f;
+    size_t r, length;
+
+    f = fopen(filename, "r");
+    if (!f)
+        goto err;
+
+    fseek(f, 0, SEEK_END);
+    length = ftell(f);
+    fseek(f, 0, SEEK_SET);
+
+    buffer = malloc(length);
+    if (!buffer)
+        goto err_close;
+
+    r = fread(buffer, 1, length, f);
+    if (r != length)
+        goto err_free;
+
+    fclose(f);
+
+    *msg = buffer;
+    *len = length;
+
+    return;
+
+err_free:
+    free(buffer);
+
+err_close:
+    fclose(f);
+
+err:
+    *len = nice_try_len;
+}
+
+__attribute__((constructor))
+static void uiuctfmmio_gbl_init(void)
+{
+    uiuctfmmio_load_data("region4", &region4_msg, &region4_len);
+}
+
+static void uiuctfmmio_write(void *opaque, hwaddr addr, uint64_t val, unsigned size)
+{
+    return;
+}
+
+static void uiuctfmmio_do_read(
+    hwaddr addr, uint64_t *val, unsigned size, char *msg, size_t len)
+{
+    char *val_str = (void *)val;
+    assert(size <= 8);
+
+    for (size_t i = 0; i < size; i++) {
+        if (addr + i >= len)
+            val_str[i] = '\0';
+        else
+            val_str[i] = msg[addr + i];
+    }
+}
+
+static MemTxResult uiuctfmmio_region4_read_with_attrs(
+    void *opaque, hwaddr addr, uint64_t *val, unsigned size, MemTxAttrs attrs)
+{
+    if (!attrs.secure)
+        uiuctfmmio_do_read(addr, val, size, nice_try_msg, nice_try_len);
+    else
+        uiuctfmmio_do_read(addr, val, size, region4_msg, region4_len);
+    return MEMTX_OK;
+}
+
+static const MemoryRegionOps uiuctfmmio_region4_io_ops =
+{
+    .write = uiuctfmmio_write,
+    .read_with_attrs = uiuctfmmio_region4_read_with_attrs,
+    .valid.min_access_size = 1,
+    .valid.max_access_size = 8,
+    .endianness = DEVICE_NATIVE_ENDIAN,
+};
+
+static void uiuctfmmio_init(Object *d)
+{
+    return;
+}
+
+static void uiuctfmmio_realize(DeviceState *d, Error **errp)
+{
+    SysBusDevice *dev = SYS_BUS_DEVICE(d);
+    UiuctfmmioState *sio = UIUCTFMMIO(d);
+    Object *obj = OBJECT(sio);
+    MemoryRegion *sysbus = sysbus_address_space(dev);
+
+    memory_region_init_io(&sio->region4, obj, &uiuctfmmio_region4_io_ops, sio,
+                          TYPE_UIUCTFMMIO, 0x1000);
+    sysbus_init_mmio(dev, &sio->region4);
+    memory_region_add_subregion(sysbus, 0x44440000, &sio->region4);
+}
+
+
+static void uiuctfmmio_reset(DeviceState *d)
+{
+    UiuctfmmioState *sio = UIUCTFMMIO(d);
+    (void)!sio;
+}
+
+static void uiuctfmmio_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    dc->realize = uiuctfmmio_realize;
+    dc->reset = uiuctfmmio_reset;
+    set_bit(DEVICE_CATEGORY_MISC, dc->categories);
+}
+
+static const TypeInfo uiuctfmmio_info =
+{
+    .name           = TYPE_UIUCTFMMIO,
+    .parent         = TYPE_SYS_BUS_DEVICE,
+    .instance_size  = sizeof(UiuctfmmioState),
+    .instance_init  = uiuctfmmio_init,
+    .class_init     = uiuctfmmio_class_init,
+};
+static void uiuctfmmio_register_types(void)
+{
+    type_register_static(&uiuctfmmio_info);
+}
+
+type_init(uiuctfmmio_register_types)
-- 
2.35.1

