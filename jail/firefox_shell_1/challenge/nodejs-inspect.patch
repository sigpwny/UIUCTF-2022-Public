diff --git a/lib/internal/util/inspect.js b/lib/internal/util/inspect.js
index f38df74e..fb2d6975 100644
--- a/lib/internal/util/inspect.js
+++ b/lib/internal/util/inspect.js
@@ -1,5 +1,3 @@
-'use strict';
-
 const {
   Array,
   ArrayIsArray,
@@ -61,12 +59,14 @@ const {
   StringPrototypeCharCodeAt,
   StringPrototypeCodePointAt,
   StringPrototypeIncludes,
+  StringPrototypeMatch,
   StringPrototypeNormalize,
   StringPrototypePadEnd,
   StringPrototypePadStart,
   StringPrototypeRepeat,
   StringPrototypeSlice,
   StringPrototypeSplit,
+  StringPrototypeStartsWith,
   StringPrototypeToLowerCase,
   StringPrototypeTrim,
   StringPrototypeValueOf,
@@ -96,6 +96,13 @@ const {
   }
 } = internalBinding('util');
 
+const {
+  isXPCWrappedNative,
+  XPCWrappedNativeToString,
+  isNsJSIID,
+  nsJSIIDToString,
+} = internalBinding('uiuctf');
+
 const {
   customInspectSymbol,
   isError,
@@ -136,7 +143,6 @@ const {
 
 const assert = require('internal/assert');
 
-const { NativeModule } = require('internal/bootstrap/loaders');
 const {
   validateObject,
   validateString,
@@ -191,8 +197,7 @@ const strEscapeSequencesReplacerSingle = /[\x00-\x1f\x5c\x7f-\x9f]|[\ud800-\udbf
 const keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
 const numberRegExp = /^(0|[1-9][0-9]*)$/;
 
-const coreModuleRegExp = /^ {4}at (?:[^/\\(]+ \(|)node:(.+):\d+:\d+\)?$/;
-const nodeModulesRegExp = /[/\\]node_modules[/\\](.+?)(?=[/\\])/g;
+const coreModuleRegExp = /^ {4}at (?:[^\\(]+ \(|)resource:\/\/(.+):\d+:\d+\)?$/;
 
 const classRegExp = /^(\s+[^(]*?)\s*{/;
 // eslint-disable-next-line node-core/no-unescaped-regexp-dot
@@ -457,7 +462,8 @@ inspect.styles = ObjectAssign(ObjectCreate(null), {
   // "name": intentionally not styling
   // TODO(BridgeAR): Highlight regular expressions properly.
   regexp: 'red',
-  module: 'underline'
+  module: 'underline',
+  permdeny: 'red'
 });
 
 function addQuotes(str, quotes) {
@@ -584,7 +590,22 @@ function getConstructorName(obj, ctx, recurseTimes, protoProps) {
         addPrototypeProperties(
           ctx, tmp, firstProto || tmp, recurseTimes, protoProps);
       }
-      return String(descriptor.value.name);
+
+      const descriptorName = String(descriptor.value.name);
+      if (descriptorName !== 'Object')
+        return descriptorName;
+
+      const nativeClassName = internalGetConstructorName(tmp);
+
+      // This is boring. If this is a XPCOM XPCWrappedNative, we can do better
+      if (isXPCWrappedNative(tmp))
+        return StringPrototypeReplace(
+          XPCWrappedNativeToString(tmp), /^\[object /, '[');
+      if (isNsJSIID(tmp))
+        return `${nativeClassName} [${nsJSIIDToString(tmp)}]`;
+
+      // and anything else will be strictly better than just "Object"
+      return nativeClassName;
     }
 
     obj = ObjectGetPrototypeOf(obj);
@@ -822,7 +843,17 @@ function formatValue(ctx, value, recurseTimes, typedArray) {
     return ctx.stylize(`[Circular *${index}]`, 'special');
   }
 
-  return formatRaw(ctx, value, recurseTimes, typedArray);
+  try {
+    return formatRaw(ctx, value, recurseTimes, typedArray);
+  } catch (e) {
+    if (
+      typeof e === 'object' &&
+      typeof e.message === 'string' &&
+      StringPrototypeStartsWith(e.message, 'Permission denied ')
+    )
+      return ctx.stylize('[Permission Denied]', 'permdeny');
+    throw e;
+  }
 }
 
 function formatRaw(ctx, value, recurseTimes, typedArray) {
@@ -1156,7 +1187,7 @@ function getClassBase(value, constructor, tag) {
   return `[${base}]`;
 }
 
-function getFunctionBase(value, constructor, tag) {
+function getFunctionBaseInner(value, constructor, tag) {
   const stringified = FunctionPrototypeToString(value);
   if (stringified.startsWith('class') && stringified.endsWith('}')) {
     const slice = stringified.slice(5, -1);
@@ -1194,6 +1225,18 @@ function getFunctionBase(value, constructor, tag) {
   return base;
 }
 
+function getFunctionBase(value, ctor, tag) {
+  try {
+    return getFunctionBaseInner(value, ctor, tag);
+  } catch (e) {
+    if (ctor === 'MozQueryInterface' && tag === 'MozQueryInterface')
+      return '[Function: MozQueryInterface]';
+    if (isXPCWrappedNative(value))
+      return `[Function: ${internalGetConstructorName(value)}]`;
+    throw e;
+  }
+}
+
 function identicalSequenceRange(a, b) {
   for (let i = 0; i < a.length - 3; i++) {
     // Find the first entry of b that matches the current entry of a.
@@ -1218,7 +1261,52 @@ function identicalSequenceRange(a, b) {
 }
 
 function getStackString(error) {
-  return error.stack ? String(error.stack) : ErrorPrototypeToString(error);
+  let res = ErrorPrototypeToString(error);
+
+  if (typeof error.stack === 'string')
+    for (let line of StringPrototypeSplit(error.stack, '\n')) {
+      if (!StringPrototypeTrim(line).length)
+        continue;
+
+      let lineedit = line;
+      let match;
+      // Poor man's goto
+      do {
+        if (!(match = StringPrototypeMatch(lineedit, /^(.+):(\d+):(\d+)$/)))
+          break;
+        let row, col;
+        ({ 1: lineedit, 2: row, 3: col } = match);
+
+        const evals = [];
+        while (true) {
+          if (!(match = StringPrototypeMatch(lineedit, /^(.+) line (\d+) > ([a-zA-Z]+)$/)))
+            break;
+          let evalline, evaltype;
+          ({ 1: lineedit, 2: evalline, 3: evaltype } = match);
+
+          ArrayPrototypePush(evals, [evalline, evaltype]);
+        }
+
+        if (!(match = StringPrototypeMatch(lineedit, /^(.*?)@(.*)$/)))
+          break;
+        const { 1: funcname, 2: filename } = match;
+
+        lineedit = filename;
+
+        while (evals.length) {
+          const { 0: evalline, 1: evaltype } = ArrayPrototypePop(evals);
+          lineedit = `${evaltype} at (${lineedit}:${evalline})`;
+        }
+
+        lineedit = `${lineedit}:${row}:${col}`;
+        if (funcname.length) lineedit = `${funcname} (${lineedit})`;
+        line = `    at ${lineedit}`;
+      } while (0);
+
+      res += `\n${line}`;
+    }
+
+  return res;
 }
 
 function getStackFrames(ctx, err, stack) {
@@ -1371,26 +1459,12 @@ function formatError(err, constructor, tag, ctx, keys) {
     const lines = getStackFrames(ctx, err, stackFramePart);
     if (ctx.colors) {
       // Highlight userland code and node modules.
-      const workingDirectory = safeGetCWD();
-      let esmWorkingDirectory;
       for (let line of lines) {
         const core = line.match(coreModuleRegExp);
-        if (core !== null && NativeModule.exists(core[1])) {
+        if (core !== null) {
           newStack += `\n${ctx.stylize(line, 'undefined')}`;
         } else {
-          newStack += '\n';
-
-          line = markNodeModules(ctx, line);
-          if (workingDirectory !== undefined) {
-            let newLine = markCwd(ctx, line, workingDirectory);
-            if (newLine === line) {
-              esmWorkingDirectory ??= pathToFileUrlHref(workingDirectory);
-              newLine = markCwd(ctx, line, esmWorkingDirectory);
-            }
-            line = newLine;
-          }
-
-          newStack += line;
+          newStack += `\n${line}`;
         }
       }
     } else {
@@ -1526,8 +1600,8 @@ function handleMaxCallStackSize(ctx, err, constructorName, indentationLvl) {
       'special'
     );
   }
-  /* c8 ignore next */
-  assert.fail(err.stack);
+  // Losing all the stack here makes it impossible for me to debug this
+  throw err;
 }
 
 function addNumericSeparator(integerString) {
