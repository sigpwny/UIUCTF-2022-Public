from Crypto.Util.number import long_to_bytes, isPrime
from math import prod
from sage.all import *

e = 65537
d = 195285722677343056731308789302965842898515630705905989253864700147610471486140197351850817673117692460241696816114531352324651403853171392804745693538688912545296861525940847905313261324431856121426611991563634798757309882637947424059539232910352573618475579466190912888605860293465441434324139634261315613929473
ct = 212118183964533878687650903337696329626088379125296944148034924018434446792800531043981892206180946802424273758169180391641372690881250694674772100520951338387690486150086059888545223362117314871848416041394861399201900469160864641377209190150270559789319354306267000948644929585048244599181272990506465820030285

mults = [1, 2, 3, 5, 7, 11, 13]
big_factors = [int(p) for p, mult in factor(e*d-1) if p > 2**60]
m = len(big_factors)
print("Found big factors: ", m)
for bm in range(2**m):
    if bm&1: continue # 2x speedup for free :)
    if bin(bm).count("1")!= m//2: continue
    p = prod([big_factors[j] for j in range(m) if bm>>j&1])
    q = prod([big_factors[j] for j in range(m) if not bm>>j&1])
    for h in mults:
        p *= h
        if not isPrime(p+1): continue
        for k in mults:
            q *= k
            if not isPrime(q+1): continue
            n = (p+1)*(q+1)
            print("found candidate: ",long_to_bytes(pow(ct, d, n)))

